right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
?fast_demean
CRTConjoint::fast_demean()
?fast_demean
?hierNet_logistic
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
use_package("devtools")
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
education_test$resampled_test_stat
education_test$p_val
education_test
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
education_test
stopCluster()
snow::stopCluster(cl)
?load_all
library(CRTConjoint)
CRTConjoint::fast_demean
CRTConjoint::hierNet_logistic
?CRT_pval
constraint_randomization = list() (Job has dependent randomization scheme)
constraint_randomization[["FeatJob"]] = c("Financial analyst","Computer programmer","Research scientist","Doctor")
constraint_randomization[["FeatEd"]] = c("Equivalent to completing two years of college in the US", "Equivalent to completing a graduate degree in the US", "Equivalent to completing a college degree in the US")
job_test = CRT_pval(formula = form, data = data, X = "FeatJob", left = left, right = right, design = "Constraint Uniform",
constraint_randomization = constraint_randomization, non_factor = "ppage", B = 100)
job_test
constraint_randomization = list()
constraint_randomization[["FeatJob"]] = c("Financial analyst","Computer programmer","Research scientist","Doctor")
constraint_randomization[["FeatEd"]] = c("Equivalent to completing two years of college in the US", "Equivalent to completing a graduate degree in the US", "Equivalent to completing a college degree in the US")
job_test = CRT_pval(formula = form, data = data, X = "FeatJob", left = left, right = right, design = "Constraint Uniform",
constraint_randomization = constraint_randomization, non_factor = "ppage", B = 100)
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
?CRT_pval
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
constraint_randomization = list() # (Job has dependent randomization scheme)
constraint_randomization[["FeatJob"]] = c("Financial analyst","Computer programmer","Research scientist","Doctor")
constraint_randomization[["FeatEd"]] = c("Equivalent to completing two years of college in the US", "Equivalent to completing a graduate degree in the US", "Equivalent to completing a college degree in the US")
job_test = CRT_pval(formula = form, data = data, X = "FeatJob", left = left, right = right, design = "Constrained Uniform",
constraint_randomization = constraint_randomization, non_factor = "ppage", B = 100)
job_test
left
right
document()
load_all()
library(CRTConjoint)
data("immigrationdata")
?CRT_pval
constraint_randomization = list() # (Job has dependent randomization scheme)
constraint_randomization[["FeatJob"]] = c("Financial analyst","Computer programmer","Research scientist","Doctor")
constraint_randomization[["FeatEd"]] = c("Equivalent to completing two years of college in the US", "Equivalent to completing a graduate degree in the US", "Equivalent to completing a college degree in the US")
job_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatJob", left = left, right = right, design = "Constrained Uniform",
constraint_randomization = constraint_randomization, non_factor = "ppage", B = 100)
job_test
install.packages(CRTConjoint)
check()
unload()
document()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
unload()
reload(CRTConjoint)
reload(".")
library(CRTConjoint)
data("immigrationdata")
document()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
CRT_pval
?CRT_pval
install()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
load_all()
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
library(CRTConjoint)
unload()
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
devtools::load_all(".")
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
?foreach
library(CRTConjoint)
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
library(CRTConjoint)
education_test
document()
library(CRTConjoint)
library(CRTConjoint)
?CRT_pval
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# Testing whether edcuation matters for immigration preferences
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 100, analysis = 2)
education_test
constraint_randomization = list() # (Job has dependent randomization scheme)
constraint_randomization[["FeatJob"]] = c("Financial analyst","Computer programmer","Research scientist","Doctor")
constraint_randomization[["FeatEd"]] = c("Equivalent to completing two years of college in the US", "Equivalent to completing a graduate degree in the US", "Equivalent to completing a college degree in the US")
job_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatJob", left = left, right = right, design = "Constrained Uniform",
constraint_randomization = constraint_randomization, non_factor = "ppage", B = 100)
job_test
job_test$p_val
job_test$obs_test_stat
job_test$resampled_test_stat
country_data = immigrationdata
country_data$FeatCountry = as.character(country_data$FeatCountry)
country_data$FeatCountry_2 = as.character(country_data$FeatCountry_2)
country_data$FeatCountry[country_data$FeatCountry %in% c("Germany", "France", "Poland")] = "Europe"
country_data$FeatCountry_2[country_data$FeatCountry_2 %in% c("Germany", "France", "Poland")] = "Europe"
country_data$FeatCountry = factor(country_data$FeatCountry)
country_data$FeatCountry_2 = factor(country_data$FeatCountry_2)
mexico_Europe_test = CRT_pval(formula = form, data = country_data, X = "FeatCountry", left = left, right = right, design = "Nonuniform",
in_levs = c("Mexico", "Europe"), p = c(0.25, 0.75), non_factor = "ppage", B = 100, analysis = 2)
# example case with supplying own resamples
mexico_Europe_test
dim(immigrationdata)
head(immigrationdata)
dim(immigrationdata)
summary(immigrationdata)
resample_Mexico_Europe = function(country_data) {
resamples_1 = sample(c("Mexico", "Europe"), size = nrow(country_data), replace = TRUE, p = c(0.25, 0.75))
resamples_2 = sample(c("Mexico", "Europe"), size = nrow(country_data), replace = TRUE, p = c(0.25, 0.75))
resample_df = data.frame(resamples_1, resamples_2)
return(resample_df)
}
own_resamples = list()
for (i in 1:100) {
own_resamples[[i]] = resample_Mexico_Europe(country_data)
}
mexico_Europe_test = CRT_pval(formula = form, data = country_data, X = "FeatCountry", left = left, right = right, design = "Manual",
in_levs = c("Mexico", "Europe"), supplyown_resamples = own_resamples, non_factor = "ppage", B = 100, analysis = 2)
# example case with forcing with candidate gender
mexico_Europe_test_force = CRT_pval(formula = form, data = country_data, X = "FeatCountry", left = left, right = right, design = "Nonuniform", in_levs = c("Mexico", "Europe"), p = c(0.25, 0.75), forced_var = "FeatGender", non_factor = "ppage", B = 100, analysis = 0)
immigrationdata$FeatCountry
immigrationdata$FeatJob
unique(immigrationdata$FeatJob)
colnames(immigrationdata)
?CRT_profileordereffect
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# Testing is profile order effect is present or not in immigration data
profileorder_test = CRT_profileordereffect(formula = form, data = immigrationdata, left = left, right = right, B = 100)
profileorder_test
profileorder_test$p_val
?CRT_carryovereffect
?CRT_carryovereffect
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# Each respondent evaluated 5 tasks
J = 5
carryover_df = immigrationdata
carryover_df$task = rep(1:J, nrow(carryover_df)/J)
# Since immigration conjoint experiment had dependent randomization for several factors we supply our own resamples
resample_func_immigration = function(x, seed = sample(c(0, 1000), size = 1), left_idx, right_idx) {
set.seed(seed)
df = x[, c(left_idx, right_idx)]
variable = colnames(x)[c(left_idx, right_idx)]
len = length(variable)
resampled = list()
n = nrow(df)
for (i in 1:len) {
var = df[, variable[i]]
lev = levels(var)
resampled[[i]] = factor(sample(lev, size = n, replace = TRUE))
}
resampled_df = data.frame(resampled[[1]])
for (i in 2:len) {
resampled_df = cbind(resampled_df, resampled[[i]])
}
colnames(resampled_df) = colnames(df)
#escape persecution was dependently randomized
country_1 = resampled_df[, "FeatCountry"]
country_2 = resampled_df[, "FeatCountry_2"]
i_1 = which((country_1 == "Iraq" | country_1 == "Sudan" | country_1 == "Somalia"))
i_2 = which((country_2 == "Iraq" | country_2 == "Sudan" | country_2 == "Somalia"))
reason_1 = resampled_df[, "FeatReason"]
reason_2 = resampled_df[, "FeatReason_2"]
levs = levels(reason_1)
r_levs = levs[c(2,3)]
reason_1 = sample(r_levs, size = n, replace = TRUE)
reason_1[i_1] = sample(levs, size = length(i_1), replace = TRUE)
reason_2 = sample(r_levs, size = n, replace = TRUE)
reason_2[i_2] = sample(levs, size = length(i_2), replace = TRUE)
resampled_df[, "FeatReason"] = reason_1
resampled_df[, "FeatReason_2"] = reason_2
#profession high skill fix
educ_1 = resampled_df[, "FeatEd"]
educ_2 = resampled_df[, "FeatEd_2"]
i_1 = which((educ_1 == "Equivalent to completing two years of college in the US" | educ_1 == "Equivalent to completing a college degree in the US" | educ_1 == "Equivalent to completing a graduate degree in the US"))
i_2 = which((educ_2 == "Equivalent to completing two years of college in the US" | educ_2 == "Equivalent to completing a college degree in the US" | educ_2 == "Equivalent to completing a graduate degree in the US"))
job_1 = resampled_df[, "FeatJob"]
job_2 = resampled_df[, "FeatJob_2"]
levs = levels(job_1)
# take out computer programmer, doctor, financial analyst, and research scientist for those in lower education
r_levs = levs[-c(2,4,5, 9)]
job_1 = sample(r_levs, size = n, replace = TRUE)
job_1[i_1] = sample(levs, size = length(i_1), replace = TRUE)
job_2 = sample(r_levs, size = n, replace = TRUE)
job_2[i_2] = sample(levs, size = length(i_2), replace = TRUE)
resampled_df[, "FeatJob"] = job_1
resampled_df[, "FeatJob_2"] = job_2
resampled_df[colnames(resampled_df)] = lapply(resampled_df[colnames(resampled_df)], factor )
return(resampled_df)
}
own_resamples = list()
B = 100
for (i in 1:B) {
newdf = resample_func_immigration(carryover_df, left_idx = 1:9, right_idx = 10:18, seed = i)
own_resamples[[i]] = newdf
}
carryover_test = CRT_carryovereffect(formula = form, data = carryover_df, left = left, right = right, task = "task", supplyown_resamples = own_resamples, B = B)
carryover_test$p_val
carryover_test$resampled_test_stat
document()
library(CRTConjoint)
library(CRTConjoint)
library(CRTConjoint)
data("immigrationdata")
usepackage("foreach")
library(devtools)
usepackage("foreach")
use_package("foreach")
document()
library(CRTConjoint)
library(CRTConjoint)
use_package("snow")
document()
document()
library(CRTConjoint)
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
check()
document()
document()
document()
document()
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
library(CRTConjoint)
document()
unload()
reload(".")
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
library(CRTConjoint)
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
tools::package_native_routine_registration_skeleton(".")
document()
library(CRTConjoint)
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
document()
tools::package_native_routine_registration_skeleton(".")
document()
library(CRTConjoint)
library(CRTConjoint)
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob + FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
# education test
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd", left = left, right = right, non_factor = "ppage", B = 50, analysis = 2)
?CRT_fatigueeffect
library(CRTConjoint)
?setTxtProgressBar
?txtProgressBar
document()
library(CRTConjoint)
?CRT_pval
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob +
FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd",
left = left, right = right, non_factor = "ppage", B = 100, analysis = 2)
library(utils)
document()
?stats
?contrasts
?formula
?model.matrix
?formula
?contrasts
?capture.output
document()
library(CRTConjoint)
formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob
+ FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob
+ FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob
+ FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob +
FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
document()
library(CRTConjoint)
document()
library(CRTConjoint)
document()
library(CRTConjoint)
?CRT_pval
data("immigrationdata")
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob +
FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
## Not run:
# Testing whether edcuation matters for immigration preferences
education_test = CRT_pval(formula = form, data = immigrationdata, X = "FeatEd",
left = left, right = right, non_factor = "ppage", B = 100, analysis = 2)
education_test$p_val
document()
library(CRTConjoint)
browseVignettes("ggplot2")
usethis::use_vignette("my-vignette")
browseVignettes("dyplr")
browseVignettes("dpylr")
browseVignettes("dplyr")
?CRT_pval
?immigrationdata
data("immigrationdata")
head(immigrationdata)
dim(immigrationdata)
rownames(immigrationdata)
?CRT_pval
form = formula("Y ~ FeatEd + FeatGender + FeatCountry + FeatReason + FeatJob +
FeatExp + FeatPlans + FeatTrips + FeatLang + ppage + ppeducat + ppethm + ppgender")
left = colnames(immigrationdata)[1:9]
right = colnames(immigrationdata)[10:18]
left; right
immigrationdata$FeatJob[immigrationdata$FeatEd == "Equivalent to completing two years of
college in the US"]
immigrationdata$FeatJob[immigrationdata$FeatEd == "Equivalent to completing two years of
college in the US"]
immigrationdata$FeatEd
immigrationdata$FeatEd == "Equivalent to completing two years of
college in the US"
table(immigrationdata$FeatEd)
as.character(immigrationdata$FeatEd) == Equivalent to completing two years of college in the US
as.character(immigrationdata$FeatEd) == "Equivalent to completing two years of college in the US"
test = as.character(immigrationdata$FeatEd) == "Equivalent to completing two years of college in the US"
immigrationdata$FeatJob[test]
immigrationdata[, "FeatEd"]
immigrationdata[, "FeatEd"] %in% constraint_randomization[[2]]
?CRT_profileordereffect
?CRT_fatigueeffect
?CRT_carryovereffect
?CRT_fatigueeffect
document()
library(CRTConjoint)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
library(CRTConjoint)
file.exists("~/.ssh/id_rsa.pub")
